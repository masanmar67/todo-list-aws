pipeline {
    agent none
    stages {
        stage('Get Code') {
            agent {label 'nodo1'}
            steps {
                // Obtener el código del repositorio en github
                echo 'Obteniendo el código de repositorio'
                git branch: 'master', url: 'https://github.com/masanmar67/todo-list-aws.git'
                dir('config-repo') {
                    git branch: 'production', url: 'https://github.com/masanmar67/todo-list-aws-config.git'
                }
                script {
                    sh 'cp config-repo/samconfig.toml ./'
                }
                sh 'ls'
                echo WORKSPACE
                stash includes: '**', name: 'Files'
            }
        }

        stage('Static'){
            agent {label 'nodo2'}
            steps {
                unstash 'Files'
                sh '''
                    export PATH="/home/ubuntu/.local/bin:${PATH}"
                    flake8 --format=pylint --exit-zero src > flake8.out
                '''
                recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')]
            }
        }
        stage('Security'){
            agent {label 'nodo2'}
            steps {
                sh '''
                    export PATH="/home/ubuntu/.local/bin:${PATH}"
                    bandit --exit-zero -r . --format=custom -o bandit.out --msg-template "{abspath}:{line}: [{test_id}] {msg}"
                '''
                recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')]
            }
        }
        stage('Build') {
            agent {label 'nodo1'}
            steps {
                sh '''
                sam build
                '''
            }
        }
        stage('Deploy to AWS') {
            agent {label 'nodo1'}
            steps {
                sh '''
                sam deploy --config-env production --capabilities CAPABILITY_IAM
                '''
            }
        }
        stage('Get API URL') {
            agent {label 'nodo1'}
            steps {
                script {
                    def apiUrl = sh(script: "sam list stack-outputs --stack-name todo-list-aws-staging --region us-east-1 --output json | jq -r '.[] | select(.OutputKey == \"BaseUrlApi\") | .OutputValue'", returnStdout: true).trim()
                    echo "BASE URL: ${apiUrl}"
                    writeFile file: 'base_url.txt', text: apiUrl
                    stash includes: 'base_url.txt', name: 'base_url'
                }
            }
        }
        stage('RestService'){
            agent {label 'nodo3'}
            steps {
                unstash 'Files'
                unstash 'base_url'
                script {
                    def apiUrl = readFile('base_url.txt').trim()
                    echo "API URL in RestService: ${apiUrl}"
                    withEnv(["BASE_URL=${apiUrl}"]) {
                        sh '''
                            pytest --junitxml=result-rest.xml ./test/integration
                        '''
                    }
                }
            }
        }
    }
}
